// CS2C Assignment #1 Submission - Benny Boyle, 10/1/19

// CS 2C Assignment #1 Part A - int Version

#include <iostream>
#include <vector>
#include <time.h>

using namespace std;

// ------------------------- Global Scope Definitions --------------------------

bool isTargetViable(vector<int> dataSet, int TARGET)
{
   int total = 0;
   for (int i = 0; i < dataSet.size(); i++)
   {
      total += dataSet[i];
   }
   if (total < TARGET)
   {
      return false;
   }
   return true;
}

// ---------------------------- Sublist Prototype ----------------------------

class Sublist
{
public:
   Sublist(vector<int> *orig = NULL) : sum(0), originalObjects (orig) { }
   Sublist addItem( int indexOfItemToAdd );
   void showSublist() const;
   int getSum() const { return sum; }

private:
   int sum;
   vector<int> *originalObjects;
   vector<int> indices;
};

// ------------------------ Sublist Method Definitions ------------------------

Sublist Sublist::addItem(int indexOfItemToAdd) {
   Sublist newSublist = Sublist(this->originalObjects);
   for (int i = 0; i < this->indices.size(); i++)
   {
      newSublist.indices.push_back(this->indices.at(i));
   }
   newSublist.indices.push_back(indexOfItemToAdd);
   newSublist.sum = this->getSum() + originalObjects->at(indexOfItemToAdd);
   return newSublist;
}

void Sublist::showSublist() const {
   for (int i = 0; i < this->indices.size(); i++) {
      int indexOfIndices = this->indices[i];
      cout << "array[" << indexOfIndices << "] = " << originalObjects->at(indexOfIndices);
      if (i < this->indices.size() - 1)
      {
         cout  << ", ";
      }
   }
   cout << endl;
}

// ------------------------------------ Main ------------------------------------

int main()
{
   int TARGET = 180;
   vector<int> dataSet;
   vector<Sublist> choices;
   vector<Sublist>::iterator iter, iterBest;
   bool foundPerfect = false;

   dataSet.push_back(20); dataSet.push_back(12); dataSet.push_back(22);
   dataSet.push_back(15); dataSet.push_back(25);
   dataSet.push_back(19); dataSet.push_back(29);
   dataSet.push_back(18);
   dataSet.push_back(11); dataSet.push_back(13); dataSet.push_back(17);

   choices.clear();
   cout << "Target time: " << TARGET << endl;

   if (!isTargetViable(dataSet, TARGET))
   {
      cout << "Target too high, cannot find solution" << endl;
      return 0;
   }

   choices.clear();
   choices.push_back(Sublist(&dataSet));
   iterBest = choices.begin();
   for (int j = 0; j < dataSet.size(); j++)
   {
      vector<Sublist> choicesCopyForIterating = choices;
      for (iter = choicesCopyForIterating.begin(); iter != choicesCopyForIterating.end(); iter++)
      {
         if (iter->getSum() + dataSet[j] == TARGET)
         {
            choices.push_back(iter->addItem(j));
            iterBest = choices.end()-1;
            foundPerfect = true;
            break;
         }
         else if (iter->getSum() + dataSet[j] < TARGET)
         {
            choices.push_back(iter->addItem(j));
         }
      }
      if (foundPerfect)
      {
         break;
      }
   }
   if (!foundPerfect)
   {
      for (iter = choices.begin(); iter != choices.end(); iter++)
      {
         if (TARGET - iter->getSum() < TARGET - iterBest->getSum())
         {
            iterBest = iter;
         }
      }
   }
   cout << "Sublist ------------------------" << endl;
   cout << "sum: " << iterBest->getSum() << endl;
   iterBest->showSublist();
   return 0;
}


/* ------------------------------------ Runs ------------------------------------

Target time: 1
Sublist ------------------------
sum: 0

Program ended with exit code: 0


Target time: 67
Sublist ------------------------
sum: 67
array[0] = 20, array[2] = 22, array[4] = 25
Program ended with exit code: 0


Target time: 180
Sublist ------------------------
sum: 179
array[0] = 20, array[1] = 12, array[3] = 15, array[4] = 25, array[5] = 19, array[6] = 29, array[7] = 18, array[8] = 11, array[9] = 13, array[10] = 17
Program ended with exit code: 0


Target time: 200
Sublist ------------------------
sum: 190
array[0] = 20, array[1] = 12, array[2] = 22, array[3] = 15, array[4] = 25, array[5] = 19, array[6] = 29, array[7] = 18, array[9] = 13, array[10] = 17
Program ended with exit code: 0


Target time: 1000
Target too high, cannot find solution
Program ended with exit code: 0


Target time: 201
Sublist ------------------------
sum: 201
array[0] = 20, array[1] = 12, array[2] = 22, array[3] = 15, array[4] = 25, array[5] = 19, array[6] = 29, array[7] = 18, array[8] = 11, array[9] = 13, array[10] = 17
Program ended with exit code: 0


Target time: 16
Sublist ------------------------
sum: 15
array[3] = 15
Program ended with exit code: 0


Target time: 95
Sublist ------------------------
sum: 95
array[0] = 20, array[1] = 12, array[3] = 15, array[5] = 19, array[6] = 29
Program ended with exit code: 0

———-----------------------------------------------------------------------------*/


// CS 2C Assignment #1 Part B - iTunesEntry Version

#include "iTunes.h"
#include <time.h>

using namespace std;


// ------------------------- Global Scope Definitions --------------------------

int operator+(int value, iTunesEntry entry)
{
   return entry.getTime() + value;
}

int operator+(iTunesEntry entry, int value)
{
   return entry.getTime() + value;
}

bool isTargetViable(vector<iTunesEntry> dataSet, int TARGET)
{
   int i, total = 0;
   for (i = 0; i < dataSet.size(); i++)
   {
      total += dataSet[i].getTime();
   }
   if (total < TARGET)
   {
      return false;
   }
   return true;
}

ostream & operator<< (ostream &out, iTunesEntry entry)
{
   string currTitle = entry.getTitle();
   currTitle.erase(remove(currTitle.begin(), currTitle.end(), '\r'), currTitle.end());
   string currArtist = entry.getArtist();
   currArtist.erase(remove(currArtist.begin(), currArtist.end(), '\r'), currArtist.end());
   out << currTitle << " by " << currArtist << "(" << entry.getTime() << ") ";
   return out;
}

// ---------------------------- Sublist Prototype ----------------------------

class Sublist
{
public:
   Sublist(vector<iTunesEntry> *orig = NULL) : time(0), originalObjects (orig) { }
   Sublist addItem( int indexOfItemToAdd );
   void showSublist() const;
   int getTime() const { return time; }

private:
   int time;
   vector<iTunesEntry> *originalObjects;
   vector<int> indices;
};

// ------------------------ Sublist Method Definitions ------------------------

Sublist Sublist::addItem(int indexOfItemToAdd) {
   Sublist newSublist = Sublist(this->originalObjects);
   for (int i = 0; i < this->indices.size(); i++)
   {
      newSublist.indices.push_back(this->indices.at(i));
   }
   newSublist.indices.push_back(indexOfItemToAdd);
   newSublist.time = this->getTime() + originalObjects->at(indexOfItemToAdd).getTime();
   return newSublist;
}

void Sublist::showSublist() const {
   for (int i = 0; i < this->indices.size(); i++) {
      int indexOfIndices = this->indices[i];
      iTunesEntry currentSong = originalObjects->at(indexOfIndices);
      cout << "array[" << indexOfIndices << "] = ";
      cout << currentSong;
      if (i < this->indices.size() - 1)
      {
         cout  << ",  ";
      }
   }
   cout << endl;
}

// ------------------------------------ Main ------------------------------------

int main()
{
   const int TARGET = 3600;
   vector<iTunesEntry> dataSet;
   vector<Sublist> choices;
   vector<Sublist>::iterator iter, iterBest;
   int array_size;
   bool foundPerfect = false;

   // read the data
   iTunesEntryReader tunes_input("itunes_file.txt");
   if (tunes_input.readError())
   {
      cout << "couldn't open " << tunes_input.getFileName()
      << " for input.\n";
      exit(1);
   }

   // time the algorithm -------------------------
   clock_t startTime, stopTime;
   startTime = clock();

   // create a vector of objects for our own use:
   array_size = tunes_input.getNumTunes();
   for (int k = 0; k < array_size; k++)
      dataSet.push_back(tunes_input[k]);

   choices.clear();
   cout << "Target time: " << TARGET << endl;

   if (!isTargetViable(dataSet, TARGET))
   {
      cout << "Target too high, cannot find solution" << endl;
      return 0;
   }

   choices.clear();
   choices.push_back(Sublist(&dataSet));
   iterBest = choices.begin();
   for (int j = 0; j < dataSet.size(); j++)
   {
      vector<Sublist> choicesCopyForIterating = choices;
      for (iter = choicesCopyForIterating.begin(); iter != choicesCopyForIterating.end(); iter++)
      {
         if (iter->getTime() + dataSet[j] == TARGET)
         {
            choices.push_back(iter->addItem(j));
            iterBest = choices.end()-1;
            foundPerfect = true;
            break;
         }
         else if (iter->getTime() + dataSet[j] < TARGET)
         {
            choices.push_back(iter->addItem(j));
         }
      }
      if (foundPerfect)
      {
         break;
      }
   }
   if (!foundPerfect)
   {
      for (iter = choices.begin(); iter != choices.end(); iter++)
      {
         if (TARGET - iter->getTime() < TARGET - iterBest->getTime())
         {
            iterBest = iter;
         }
      }
   }
   cout << "Sublist ------------------------" << endl;
   cout << "  sum: " << iterBest->getTime() << endl << "  ";
   iterBest->showSublist();

   // how we determine the time elapsed -------------------
   stopTime = clock();
   // report algorithm time
   cout << "\nAlgorithm Elapsed Time: "
   << (double)(stopTime - startTime)/(double)CLOCKS_PER_SEC
   << " seconds." << endl << endl;

   return 0;
}


/* ------------------------------------ Runs ------------------------------------

Target time: 0
Sublist ------------------------
  sum: 0
  

Algorithm Elapsed Time: 0.000296 seconds.

Program ended with exit code: 0


Target time: 1200
Sublist ------------------------
  sum: 1200
  array[0] = Cowboy Casanova by Carrie Underwood(236) ,  array[1] = Quitter by Carrie Underwood(220) ,  array[2] = Russian Roulette by Rihanna(228) ,  array[6] = Bad Love by Eric Clapton(308) ,  array[11] = Hot Cha by Roy Buchanan(208) 

Algorithm Elapsed Time: 0.002283 seconds.

Program ended with exit code: 0


Target time: 3600
Sublist ------------------------
  sum: 3600
  array[0] = Cowboy Casanova by Carrie Underwood(236) ,  array[1] = Quitter by Carrie Underwood(220) ,  array[2] = Russian Roulette by Rihanna(228) ,  array[4] = Monkey Wrench by Foo Fighters(230) ,  array[5] = Pretending by Eric Clapton(283) ,  array[6] = Bad Love by Eric Clapton(308) ,  array[7] = Everybody's In The Mood by Howlin' Wolf(178) ,  array[8] = Well That's All Right by Howlin' Wolf(175) ,  array[9] = Samson and Delilah by Reverend Gary Davis(216) ,  array[11] = Hot Cha by Roy Buchanan(208) ,  array[12] = Green Onions by Roy Buchanan(443) ,  array[13] = I'm Just a Prisoner by Janiva Magness(230) ,  array[14] = You Were Never Mine by Janiva Magness(276) ,  array[15] = Hobo Blues by John Lee Hooker(187) ,  array[16] = I Can't Quit You Baby by John Lee Hooker(182) 

Algorithm Elapsed Time: 0.272099 seconds.

Program ended with exit code: 0


Target time: 4799
Sublist ------------------------
  sum: 4799
  array[0] = Cowboy Casanova by Carrie Underwood(236) ,  array[1] = Quitter by Carrie Underwood(220) ,  array[2] = Russian Roulette by Rihanna(228) ,  array[3] = All My Life by Foo Fighters(263) ,  array[4] = Monkey Wrench by Foo Fighters(230) ,  array[5] = Pretending by Eric Clapton(283) ,  array[6] = Bad Love by Eric Clapton(308) ,  array[8] = Well That's All Right by Howlin' Wolf(175) ,  array[9] = Samson and Delilah by Reverend Gary Davis(216) ,  array[10] = Twelve Sticks by Reverend Gary Davis(194) ,  array[11] = Hot Cha by Roy Buchanan(208) ,  array[12] = Green Onions by Roy Buchanan(443) ,  array[13] = I'm Just a Prisoner by Janiva Magness(230) ,  array[14] = You Were Never Mine by Janiva Magness(276) ,  array[15] = Hobo Blues by John Lee Hooker(187) ,  array[16] = I Can't Quit You Baby by John Lee Hooker(182) ,  array[17] = That's The Homie by Snoop Dogg(343) ,  array[19] = Ladies and Gentleman by The Rubyz(201) ,  array[20] = Watch the Girl by The Rubyz(192) ,  array[21] = Donuts for Benny by Veggie Tales(184) 

Algorithm Elapsed Time: 7.95314 seconds.

Program ended with exit code: 0


Target time: 100000
Target too high, cannot find solution
Program ended with exit code: 0


Target time: 300
Sublist ------------------------
  sum: 300
  array[22] = Our Big Break by Veggie Tales(69) ,  array[69] = Luka by Suzanne Vega(231) 

Algorithm Elapsed Time: 0.001812 seconds.

Program ended with exit code: 0


Target time: 100
Sublist ------------------------
  sum: 79
  array[32] = Bullhead's Psalm by Blue Record(79) 

Algorithm Elapsed Time: 0.000316 seconds.

Program ended with exit code: 0


Target time: 6000
Sublist ------------------------
  sum: 6000
  array[0] = Cowboy Casanova by Carrie Underwood(236) ,  array[1] = Quitter by Carrie Underwood(220) ,  array[2] = Russian Roulette by Rihanna(228) ,  array[3] = All My Life by Foo Fighters(263) ,  array[4] = Monkey Wrench by Foo Fighters(230) ,  array[5] = Pretending by Eric Clapton(283) ,  array[7] = Everybody's In The Mood by Howlin' Wolf(178) ,  array[8] = Well That's All Right by Howlin' Wolf(175) ,  array[9] = Samson and Delilah by Reverend Gary Davis(216) ,  array[11] = Hot Cha by Roy Buchanan(208) ,  array[12] = Green Onions by Roy Buchanan(443) ,  array[13] = I'm Just a Prisoner by Janiva Magness(230) ,  array[14] = You Were Never Mine by Janiva Magness(276) ,  array[16] = I Can't Quit You Baby by John Lee Hooker(182) ,  array[17] = That's The Homie by Snoop Dogg(343) ,  array[18] = Gangsta Luv by Snoop Dogg(257) ,  array[19] = Ladies and Gentleman by The Rubyz(201) ,  array[20] = Watch the Girl by The Rubyz(192) ,  array[23] = Brahms: Symphony No. 1 in C Minor Op. 68 by Berliner Philharmoniker(839) ,  array[24] = Brahms: Symphony No. 4 in E Minor Op. 98 by Berliner Philharmoniker(800) 

Algorithm Elapsed Time: 65.3448 seconds.

Program ended with exit code: 0

-------------------------------------------------------------------------------*/